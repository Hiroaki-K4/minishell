[1mdiff --git a/srcs/execute/execute.c b/srcs/execute/execute.c[m
[1mindex a37deaf..144b242 100644[m
[1m--- a/srcs/execute/execute.c[m
[1m+++ b/srcs/execute/execute.c[m
[36m@@ -20,7 +20,10 @@[m [mvoid	execute_command(char **argv, t_global_state *state)[m
 		if (execve(path, argv, state->envs->content) == -1)[m
 		{[m
 			printf("minishell: %s: command not found\n", argv[0]);[m
[32m+[m			[32mstate->last_command_exit_status = 127;[m
[32m+[m			[32m// printf("exit_status1: %d\n", state->last_command_exit_status);[m
 			exit(errno);[m
[32m+[m			[32m// exit(127);[m
 		}[m
 	}[m
 }[m
[36m@@ -35,6 +38,11 @@[m [mvoid	wait_all_processes(t_global_state *state)[m
 	while (i < state->process_count)[m
 	{[m
 		finished_pid = waitpid(-1, &status, 0);[m
[32m+[m		[32mif (WIFEXITED(status))[m
[32m+[m		[32m{[m
[32m+[m			[32mstate->last_command_exit_status = WEXITSTATUS(status);[m
[32m+[m			[32mprintf("exit_status2: %d\n", state->last_command_exit_status);[m
[32m+[m		[32m}[m
 		if (finished_pid < 0)[m
 		{[m
 			if (WIFSIGNALED(status))[m
[36m@@ -93,7 +101,10 @@[m [mint	execute_commands(t_node *node, int pipes[2], t_global_state *state)[m
 		}[m
 		state->redirect_num = 0;[m
 		if (node->is_furthest_right)[m
[32m+[m		[32m{[m
 			wait_all_processes(state);[m
[32m+[m			[32m// printf("[parent process]exit_status: %d\n", state->last_command_exit_status);[m
[32m+[m		[32m}[m
 	}[m
 	return (SUCCESS);[m
 }[m
[1mdiff --git a/srcs/main.c b/srcs/main.c[m
[1mindex 3d8c8f0..8cb2eb0 100644[m
[1m--- a/srcs/main.c[m
[1m+++ b/srcs/main.c[m
[36m@@ -80,7 +80,9 @@[m [mvoid	minishell(char *envp[], int exe)[m
 			add_history(input);[m
 		}[m
 		free(input);[m
[32m+[m		[32m// printf("exit_status: %d\n", state.last_command_exit_status);[m
 		refresh_global_state(&state);[m
[32m+[m		[32m// printf("exit_status: %d\n", state.last_command_exit_status);[m
 	}[m
 }[m
 [m
